<?php
/**
 * wcx-syslog
 *
 * @category   System
 * @package    Syslog
 * @copyright  Copyright (c) 2014 Felipe Weckx
 * @license    http://opensource.org/licenses/MIT The MIT License
 * @author Felipe Weckx <felipe@weckx.net>
 */

namespace Wcx\Syslog\Message;

/**
 * BSD Syslog Message acording to RFC3164. Note that this is and old format and
 * should only be used to send messages to legacy syslog servers that do not support the
 * new RFC5424 format.
 *
 * @author Felipe Weckx <felipe@weckx.net>
 */
abstract class MessageAbstract implements MessageInterface
{
    /**
     * RFC3164 specified facilities
     */
    const FACILITY_KERNEL       = 0;
    const FACILITY_USER         = 1;
    const FACILITY_MAIL         = 2;
    const FACILITY_SYSTEM       = 3;
    const FACILITY_SECURITY     = 4;
    const FACILITY_SYSLOG       = 5;
    const FACILITY_PRINTER      = 6;
    const FACILITY_NETWORK_NEWS = 7;
    const FACILITY_UUCP         = 8;
    const FACILITY_CLOCK        = 9;
    const FACILITY_AUTH         = 10;
    const FACILITY_FTP          = 11;
    const FACILITY_NTP          = 12;
    const FACILITY_AUDIT        = 13;
    const FACILITY_ALERT        = 14;
    const FACILITY_CLOCK2       = 15;
    const FACILITY_LOCAL0       = 16;
    const FACILITY_LOCAL1       = 17;
    const FACILITY_LOCAL2       = 18;
    const FACILITY_LOCAL3       = 19;
    const FACILITY_LOCAL4       = 20;
    const FACILITY_LOCAL5       = 21;
    const FACILITY_LOCAL6       = 22;
    const FACILITY_LOCAL7       = 23;

    /**
     * RFC3164 specified priorities
     */
    const PRIORITY_EMERGENCY = 0;
    const PRIORITY_ALERT     = 1;
    const PRIORITY_CRITICAL  = 2;
    const PRIORITY_ERROR     = 3;
    const PRIORITY_WARNING   = 4;
    const PRIORITY_NOTICE    = 5;
    const PRIORITY_INFO      = 6;
    const PRIORITY_DEBUG     = 7;

    /**
     * Default transport class
     */
    public static $defaultTransportClass = 'Wcx\Syslog\Transport\Udp';

    /**
     * Message facility
     * @var int
     */
    protected $facility = self::FACILITY_USER;

    /**
     * Message Priority
     * @var int
     */
    protected $priority = self::PRIORITY_NOTICE;

    /**
     * PRI part of the message
     * @var int
     */
    protected $pri;

    /**
     * Parts of the message header
     * @var array
     */
    protected $header = array(
        'TIMESTAMP' => '', 'HOSTNAME' => ''
    );

    /**
     * The message itself
     * @var array
     */
    protected $message = array(
        'APP-NAME' => '', 'MSG' => ''
    );

    /**
     * Constructor. Sets the current hostname and timestamp
     */
    public function __construct()
    {
        $this->setHostname(php_uname('n'));
        $this->setTimestamp(new \DateTime());
        $this->calculatePri();
    }

    /**
     * Returns the message facility
     * @return int
     */
    public function getFacility()
    {
        return $this->facility;
    }

    /**
     * Set the message facility
     * @var int $facility
     * @return Bsd
     */
    public function setFacility($facility)
    {
        $this->facility = $facility;
        $this->calculatePri();
        return $this;
    }

    /**
     * Returns the message priority
     * @return int
     */
    public function getPriority()
    {
        return $this->priority;
    }

    /**
     * Set the message priority
     * @var int $priority
     * @return Bsd
     */
    public function setPriority($priority)
    {
        $this->priority = $priority;
        $this->calculatePri();
        return $this;
    }

    /**
     * Returns the timestamp of the message generation
     * @return int
     */
    public function getTimestamp()
    {
        return $this->header['TIMESTAMP'];
    }

    /**
     * Set the timestamp of the message generation
     * @var int|\DateTime $timestamp UNIX Timestamp (as generated by time() or strtotime()) or a php DateTime object
     * @return Bsd
     */
    public function setTimestamp($timestamp)
    {
        if (!$timestamp instanceof \DateTime) {
            $date = new \DateTime();
            $date->setTimestamp($timestamp);
        } else {
            $date = $timestamp;
        }
        $this->header['TIMESTAMP'] = $date->format('M d H:i:s');
        return $this;
    }

    /**
     * Returns the hostname of the machine where the message was created
     * @return string
     */
    public function getHostname()
    {
        return $this->header['HOSTNAME'];
    }

    /**
     * Set the hostname of the machine where the message was created
     * @var string $hostname
     * @return Bsd
     */
    public function setHostname($hostname)
    {
        $this->header['HOSTNAME'] = $hostname;
        return $this;
    }

    /**
     * Returns the name of the application that created the message
     * @return string
     */
    public function getAppName()
    {
        return $this->message['APP-NAME'];
    }

    /**
     * Set the name of the application that created the message
     * @var string $appName
     * @return Bsd
     */
    public function setAppName($appName)
    {
        $this->message['APP-NAME'] = $appName;
        return $this;
    }

    /**
     * Return the free form message
     * @return string
     */
    public function getMsg()
    {
        return $this->message['MSG'];
    }

    /**
     * Set the free form message
     * @param string $msg
     * @return  Message
     */
    public function setMsg($msg)
    {
        $this->message['MSG'] = $msg;
        return $this;
    }

    /**
     * Return the message as a string
     * @return string
     */
    public function getMessageString()
    {
        $str = $this->pri;
        $str .= implode(' ', $this->header);

        if ($this->message['APP-NAME']) {
            $str .= ' ' . $this->message['APP-NAME'] . ': ' . $this->message['MSG'];
        } else {
            $str .= ' ' . $this->message['MSG'];
        }
        return $str;
    }

    /**
     * Send the message to the specified target (usually host:port). If no transport
     * is specified uses the Weckx\Syslog\Transport\Udp transport
     * @param  string                                 $target    Message destination (host:port)
     * @param  TransportInterface $transport
     * @return void
     * @throws \Exception\RuntimeException If there's an error
     */
    public function send($target, \Wcx\Syslog\Transport\TransportInterface $transport = null)
    {
        if (!$transport) {
            $cls = self::$defaultTransportClass;
            $transport = new $cls();
        }
        $transport->send($this, $target);
    }

    /**
     * Calculate the PRI value for the header (facility*8 + priority)
     * @return void
     */
    protected function calculatePri()
    {
        $pri = ($this->getFacility() * 8) + $this->getPriority();
        $this->pri = '<' . $pri . '>';
    }
}
