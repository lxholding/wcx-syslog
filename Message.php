<?php

namespace SyslogMessage;

class Message
{
    const FACILITY_KERNEL       = 0;
    const FACILITY_USER         = 1;
    const FACILITY_MAIL         = 2;
    const FACILITY_SYSTEM       = 3;
    const FACILITY_SECURITY     = 4;
    const FACILITY_SYSLOG       = 5;
    const FACILITY_PRINTER      = 6;
    const FACILITY_NETWORK_NEWS = 7;
    const FACILITY_UUCP         = 8;
    const FACILITY_CLOCK        = 9;
    const FACILITY_AUTH         = 10;
    const FACILITY_FTP          = 11;
    const FACILITY_NTP          = 12;
    const FACILITY_AUDIT        = 13;
    const FACILITY_ALERT        = 14;
    const FACILITY_CLOCK2       = 15;
    const FACILITY_LOCAL0       = 16;
    const FACILITY_LOCAL1       = 17;
    const FACILITY_LOCAL2       = 18;
    const FACILITY_LOCAL3       = 19;
    const FACILITY_LOCAL4       = 20;
    const FACILITY_LOCAL5       = 21;
    const FACILITY_LOCAL6       = 22;
    const FACILITY_LOCAL7       = 23;

    const PRIORITY_EMERGENCY = 0;
    const PRIORITY_ALERT     = 1;
    const PRIORITY_CRITICAL  = 2;
    const PRIORITY_ERROR     = 3;
    const PRIORITY_WARNING   = 4;
    const PRIORITY_INFO      = 6;
    const PRIORITY_DEBUG     = 7;

    const NILVALUE = '-';

    /**
     * Message facility
     * @var int
     */
    protected $_facility = self::FACILITY_LOCAL4;

    /**
     * Message Priority
     * @var int
     */
    protected $_priority = self::PRIORITY_DEBUG;

    /**
     * Parts of the message header
     * @var array
     */
    protected $_header = array(
        'PRI' => '<167>', 'VERSION' => '1', 'TIMESTAMP' => self::NILVALUE, 'HOSTNAME' => self::NILVALUE,
        'APP-NAME' => self::NILVALUE, 'PROCID' => self::NILVALUE, 'MSGID' => self::NILVALUE
    );

    /**
     * Structured data for the message
     * @var array
     */
    protected $_structuredData = array();

    /**
     * The free form message
     * @var string
     */
    protected $_msg = self::NILVALUE;

    /**
     * Constructor. Initializes the message with the current hostname and timestamp
     */
    public function __construct()
    {
        $this->setHostname(php_uname('n'));
        $this->setTimestamp(time());
    }

    /**
     * Returns the message facility
     * @return int
     */
    public function getFacility()
    {
        return $this->_facility;
    }

    /**
     * Set the message facility
     * @var int $facility
     * @return SyslogMessage
     */
    public function setFacility($facility)
    {
        $this->_facility = $facility;
        $this->_calculatePri();
        return $this;
    }

    /**
     * Returns the message priority
     * @return int
     */
    public function getPriority()
    {
        return $this->_priority;
    }

    /**
     * Set the message priority
     * @var int $priority
     * @return SyslogMessage
     */
    public function setPriority($priority)
    {
        $this->_priority = $priority;
        $this->_calculatePri();
        return $this;
    }

    /**
     * Returns the timestamp of the message generation
     * @return int
     */
    public function getTimestamp()
    {
        return $this->_headers['TIMESTAMP'];
    }

    /**
     * Set the timestamp of the message generation
     * @var int|DateTime $timestamp UNIX Timestamp (as generated by time() or strtotime()) or a php DateTime object
     * @return SyslogMessage
     */
    public function setTimestamp($timestamp)
    {
        if (!$timestamp instanceof DateTime) {
            $timestamp = new DateTime($timestamp);
        }
        $this->_headers['TIMESTAMP'] = $timestamp->format(DateTime::RFC3339);
        return $this;
    }

    /**
     * Returns the hostname of the machine where the message was created
     * @return string
     */
    public function getHostname()
    {
        return $this->_headers['HOSTNAME'];
    }

    /**
     * Set the hostname of the machine where the message was created
     * @var string $hostname
     * @return SyslogMessage
     */
    public function setHostname($hostname)
    {
        $this->_headers['HOSTNAME'] = $hostname;
        return $this;
    }

    /**
     * Returns the name of the application that created the message
     * @return string
     */
    public function getAppName()
    {
        return $this->_headers['APP_NAME'];
    }

    /**
     * Set the name of the application that created the message
     * @var string $appName
     * @return SyslogMessage
     */
    public function setAppName($appName)
    {
        $this->_headers['APP_NAME'] = $appName;
        return $this;
    }

    /**
     * Returns the message procid
     * @return string
     */
    public function getProcId()
    {
        return $this->_headers['PROCID'];
    }

    /**
     * Set the message procid
     * @var string $procid
     * @return SyslogMessage
     */
    public function setProcId($procid)
    {
        $this->_headers['PROCID'] = $procid;
        return $this;
    }

    /**
     * Returns the message id
     * @return string
     */
    public function getMsgId()
    {
        return $this->_headers['MSGID'];
    }

    /**
     * Set the message id
     * @var string $msgId
     * @return SyslogMessage
     */
    public function setMsgId($msgId)
    {
        $this->_headers['MSGID'] = $msgId;
        return $this;
    }

    /**
     * Add a structured data block
     * @param string $name   The name of the block. Must be in ASCII and in the format name@number
     *                       or a default IANA name (see section 7 of RFC5424)
     *
     * @param array  $values Array of key-value pairs
     * @return  Message
     */
    public function addStructuredData($name, array $values)
    {
        $params = array();
        foreach ($values as $key => $value) {
            $params[] = $key . '="' . $value . '"';
        }
        $this->_structuredData[] = '[' . $name . ' ' . implode(' ', $params) . ']';
        return $this;
    }

    /**
     * Set the free form message
     * @param string $msg
     * @return  Message
     */
    public function setMsg($msg)
    {
        $this->_msg = $msg;
        return $this;
    }

    /**
     * Return the message as a string
     * @return string
     */
    public function toString()
    {
        $str = implode(' ', $this->_headers);
        if (count($this->_structuredData)) {
            $str .= ' ' . implode('', $this->_structuredData);
        } else {
            $str .= ' ' . self::NILVALUE;
        }
        $str .= ' ' . $this->_msg;
        return $str;
    }

    /**
     * Calculate the PRI value for the header (facility*8 + priority)
     * @return void
     */
    protected function _calculatePri()
    {
        $this->_headers['PRI'] = $this->getPriority() * 8 + $this->getFacility();
    }

    /**
     * For auto-conversion to string. Just proxies to toString()
     * @return string
     */
    public function __toString()
    {
        return $this->toString();
    }
}
